<?php

namespace App\Http\Controllers\Data;

use App\Models\Data\Canton;
use Illuminate\Http\Request;
use App\Models\Data\SysAccount;
use DB;
use App\Http\Controllers\Frame\AppDataController;

class SysAccountController extends AppDataController {

    public function __construct(Request $request, SysAccount $model) {
        parent::__construct($request, $model);
        $this->middleware('auth');
    }

    public function get_where($request, $dataset) {
        $where = parent::get_where($request, $dataset); // TODO: Change the autogenerated stub
        $where = $this->get_default_where($request, $where);
        if ($request->__user->role_id != 1) {
            $where['neq']['role_id'] = 1;
        }
        $where['join'] = [
            [
                'join' => 'leftJoin',
                'table' => DB::raw('sys_role as b'),
                'left' => DB::RAW($this->model_table . '.role_id'),
                'ex' => '=',
                'right' => DB::RAW('b.role_id')
            ],
            [
                'join' => 'leftJoin',
                'table' => DB::raw('sys_canton as c'),
                'left' => DB::RAW($this->model_table . '.canton_fdn'),
                'ex' => '=',
                'right' => DB::RAW('c.fdn')
            ],
            [
                'join' => 'leftJoin',
                'table' => DB::raw('resthome_info as d'),
                'left' => DB::RAW($this->model_table . '.resthome_id'),
                'ex' => '=',
                'right' => DB::RAW('d.resthome_id')
            ]
        ];
        return $where;
    }

    public function get_fields($request, $dataset) {
        return [
            DB::raw($this->model_table . '.*'),
            DB::raw('b.name as role_name'),
            DB::raw('c.text_name as canton_text_name'),
            DB::raw('d.rh_name')
        ];
    }

    protected function parse_create($request, $dataset, $id) {
        if (!isset($request['canton_id']) && isset($request['canton_fdn'])) {
            $request['canton_id'] = Canton::get_id_byfdn($request['canton_fdn']);
        }
        $request['user_type'] = 1;
        if (!empty($request['resthome_id'])) {
            $request['user_type'] = 2;
        }
        return parent::parse_create($request, $dataset, $id); // TODO: Change the autogenerated stub
    }

    public function store(Request $request) {
        $request['login_pwd'] = password_encode($request['login_pwd']);
        return parent::store($request); // TODO: Change the autogenerated stub
    }

    public function update(Request $request, $id) {
        unset($request['start_time']);
        unset($request['end_time']);
        $this->model->delete_rules_setting('login_pwd');
        return parent::update($request, $id); // TODO: Change the autogenerated stub
    }

    public function check_pwd(Request $request, $id) {
        $key = $request['login_old_pwd'];
        $new = $request['login_reset_pwd'];
        $is_ok = $this->model->check_pwd($id, $key, $new, $request['action']);
        return return_json($is_ok, $is_ok ? "密码修改成功" : "密码修改失败", $is_ok ? HTTP_OK : HTTP_WRONG);
    }

    protected function __show($request, $dataset, $fields = [], $id = null) {
        if (empty($id)) {
            return return_json([], '数据请求为空，操作失败', HTTP_WRONG);
        }
        $result = $dataset->select($fields)->find($id);
        return return_json(($result ? $result : []), ($result ? "success" : "数据没找到！"), ($result ? HTTP_OK : HTTP_WRONG));
    }

}
